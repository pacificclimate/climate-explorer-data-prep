#!python
"""This script takes a VIC-formatted parametrization file, including drainage flow
   direction information and outputs a file with the selected flow vectors decomposed 
   into normalized eastward and northward components formatted for ncWMS vector display. 
   The output netCDF will contain lat lon axes and two vector grid variables for
   ncWMS"""

import argparse
import logging

from netCDF4 import Dataset
import numpy as np
import sys
from dp.decompose_flow_vectors import logger, decompose_flow_vectors
from dp.argparse_helpers import log_level_choices


def log_and_raise_exception(source, err_msg, exc):
    logger.critical(err_msg)
    source.close()
    raise exc(err_msg)


def source_check(source):
    source_file_path = source.filepath()

    if not "lon" in source.dimensions or not "lat" in source.dimensions:
        err_msg = "{} does not have latitude and longitude dimensions".format(
            source_file_path
        )
        log_and_raise_exception(source, err_msg, AttributeError)

    valid_variables = []
    for v in source.variables:
        variable = source.variables[v]
        if (
            hasattr(variable, "dimensions")
            and "lon" in variable.dimensions
            and "lat" in variable.dimensions
        ):
            if np.ma.max(variable[:]) <= 9 and np.ma.min(variable[:]) >= 1:
                valid_variables.append(v)

    if len(valid_variables) == 0:
        err_msg = "{} does not have a valid flow variable".format(source_file_path)
        log_and_raise_exception(source, err_msg, ValueError)


def variable_check(source, variable):
    source_file_path = source.filepath()

    if not variable in source.variables:
        err_msg = "Variable {} is not found in {}".format(variable, source_file_path)
        log_and_raise_exception(source, err_msg, AttributeError)

    flow_variable = source.variables[variable]

    if not "lon" in flow_variable.dimensions or not "lat" in flow_variable.dimensions:
        err_msg = "Variable {} is not associated with a grid".format(variable)
        log_and_raise_exception(source, err_msg, AttributeError)

    if np.ma.max(flow_variable[:]) > 9 or np.ma.min(flow_variable[:]) < 1:
        err_msg = "Variable {} is not a valid flow routing".format(variable)
        log_and_raise_exception(source, err_msg, ValueError)


def main(args):
    # check that source file is usable:
    source = Dataset(args.source_file, "r", format="NETCDF4")

    try:
        source_check(source)
    except (AttributeError, ValueError):
        sys.exit(1)

    try:
        variable_check(source, args.variable)
    except (AttributeError, ValueError):
        sys.exit(2)

    decompose_flow_vectors(source, args.dest_file, args.variable)


if __name__ == "__main__":
    parser = argparse.ArgumentParser(
        description="Process an indexed flow direction netCDF into a vectored netCDF suitable for ncWMS display"
    )
    parser.add_argument("source_file", metavar="infile", help="source netCDF file")
    parser.add_argument("dest_file", metavar="outfile", help="destination netCDF file")
    parser.add_argument(
        "variable", metavar="variable", help="netCDF variable describing flow direction"
    )
    parser.add_argument(
        "-l",
        "--loglevel",
        help="Logging level",
        choices=log_level_choices,
        default="INFO",
    )

    args = parser.parse_args()
    logger.setLevel(getattr(logging, args.loglevel))
    main(args)
