#!python
'''This script takes a VIC-formatted parametrization file, including drainage flow
   direction information and outputs a file with the selected flow vectors decomposed 
   into normalized eastward and northward components formatted for ncWMS vector display. 
   The output netCDF will contain lat lon axes and two vector grid variables for
   ncWMS'''

import argparse
from netCDF4 import Dataset
import numpy as np
import time
import sys
import types

def main(args, parser):
    #check that source file is usable:
    source = Dataset(args.source_file, "r", format="NETCDF4")

    if not "lon" in source.dimensions or not "lat" in source.dimensions:
        print("{} does not have latitude and longitude dimensions".format(args.source_file))
        source.close()
        sys.exit()

    if not args.variable in source.variables:
        print("Variable {} is not found in {}".format(args.variable, args.source_file))
        source.close()
        sys.exit()


    variable = source.variables[args.variable]

    if not "lon" in variable.dimensions or not "lat" in variable.dimensions:
        print("Variable {} is not associated with a grid".format(args.variable))
        source.close()
        sys.exit()
        
    if np.ma.max(variable[:]) > 9 or np.ma.min(variable[:]) < 1:
        print("Variable {} is not a valid flow routing".format(args.variable))
        source.close()
        sys.exit()

    #create destination file, same grid as original file
    dest = Dataset(args.dest_file, "w", format="NETCDF4")   

    dest.createDimension("lat", source.dimensions["lat"].size)
    dest.createVariable("lat", "f8", ("lat"))
    dest.variables["lat"].setncatts(source.variables["lat"].__dict__)
    dest.variables["lat"][:] = source.variables["lat"][:]

    dest.createDimension("lon", source.dimensions["lon"].size)
    dest.createVariable("lon", "f8", ("lon"))
    dest.variables["lon"].setncatts(source.variables["lon"].__dict__)
    dest.variables["lon"][:] = source.variables["lon"][:]

    #create the vector variables
    eastvec = "eastward_{}".format(args.variable)
    dest.createVariable(eastvec, "f8", ("lat", "lon"))
    dest.variables[eastvec].units = "1"
    dest.variables[eastvec].standard_name = eastvec #ncWMS relies on standard names
    dest.variables[eastvec].long_name = "Normalized eastward vector component of {}".format(args.variable)

    northvec = "northward_{}".format(args.variable)
    dest.createVariable(northvec, "f8", ("lat", "lon"))
    dest.variables[northvec].units = "1"
    dest.variables[northvec].standard_name = northvec #ncWMS relies on standard names
    dest.variables[northvec].long_name = "Normalized northward vector component of {}".format(args.variable)

    #populate variables with decomposed vectors.
    directions = [[0,0], #0 = filler
                [1, 0], # 1 = N
                [.7071, .7071], #2 = NE
                [0, 1], #3 = E
                [-.7071, .7071], #4 = SE
                [-1, 0], #5 = S
                [-.7071, -.7071], #6 = SW
                [0, -1], #7 = W
                [.7071, -.7071], #8 = NW
                [0, 0]] #9 = outlet

    print("Generating eastward component")
    east = np.ma.copy(source.variables[args.variable][:])
    for (x, y), dir in np.ndenumerate(east):
        if dir >= 0 and dir <= 9:
            east[x][y] = directions[int(dir)][1]
    dest.variables[eastvec][:] = east

    print("Generating northward component")
    north = np.ma.copy(source.variables[args.variable][:])
    for (x, y), dir in np.ndenumerate(north):
        if dir >= 0 and dir <= 9:
            north[x][y] = directions[int(dir)][0]
    dest.variables[northvec][:] = north

    #copy global attributes to the new file.        
    dest.setncatts(source.__dict__)

    #update history attribute, if present, to include this script
    if "history" in dest.ncattrs():
        dest.history ="{} {} {} {} {}\n".format(time.ctime(time.time()), parser.prog, args.source_file, args.dest_file, args.variable) + dest.history

    source.close()
    dest.close()

if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Process an indexed flow direction netCDF into a vectored netCDF suitable for ncWMS display')
    parser.add_argument('source_file', metavar='infile', help='source netCDF file')
    parser.add_argument('dest_file', metavar='outfile', help='destination netCDF file')
    parser.add_argument('variable', metavar='variable', help='netCDF variable describing flow direction')

    args = parser.parse_args()
    main(args, parser)