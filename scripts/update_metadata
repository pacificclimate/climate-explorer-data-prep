#!python
"""Update NetCDF metadata from a YAML file.

WARNING: THIS SCRIPT MODIFIES THE ORIGINAL FILE.

See README for details of update specification file (YAML format).
"""

import logging
import re
import sys

from argparse import ArgumentParser

from netCDF4 import Dataset
import yaml
import six

rename_prefix = '<-'  # Or some other unlikely sequence of characters
expression_prefix = '='

formatter = logging.Formatter('%(asctime)s %(levelname)s: %(message)s', "%Y-%m-%d %H:%M:%S")
handler = logging.StreamHandler()
handler.setFormatter(formatter)

logger = logging.getLogger(__name__)
logger.addHandler(handler)
logger.setLevel(logging.DEBUG)  # For testing, overridden by -l when run as a script


# Custom functions that are provided for use by the ``=expression`` syntax.

custom_functions = {}
def custom_function(fun):
    custom_functions[fun.__name__] = fun
    return fun


@custom_function
def parse_ensemble_code(ensemble_code):
    match = re.match(r'r(\d+)i(\d+)p(\d+)', ensemble_code)
    if match:
        return {
            'realization': int(match.group(1)),
            'initialization_method': int(match.group(2)),
            'physics_version': int(match.group(3)),
        }
    raise ValueError("Could not parse '{}' as an ensemble code"
                     .format(ensemble_code))


def modify_attribute(target, name, value):
    # Delete
    if value is None:
        logger.info("\tDeleting attribute '{}'".format(name))
        if hasattr(target, name):
            delattr(target, name)
        return

    # Rename
    if (isinstance(value, six.string_types)
          and value.startswith(rename_prefix)):
        old_name = value[len(rename_prefix):]
        logger.info("\tRenaming attribute '{}' to '{}'".format(old_name, name))
        if hasattr(target, old_name):
            setattr(target, name, getattr(target, old_name))
            delattr(target, old_name)
        return

    # Expression evaluation
    if (isinstance(value, six.string_types)
          and value.startswith(expression_prefix)):
        logger.info("\tSetting attribute '{}' to expression value".format(name))
        try:
            expression = value[len(expression_prefix):]
            ncattrs = {name: getattr(target, name) for name in target.ncattrs()}
            result = eval(expression, custom_functions, ncattrs)
            setattr(target, name, result)
        except Exception:
            logger.error('\t\tException during evaluation of expression:',
                         sys.exc_info()[0])
        return

    # Set
    logger.info("\tSetting attribute '{}'".format(name))
    setattr(target, name, value)


def process(target, item):
    if isinstance(item, tuple) and len(item) == 2:
        modify_attribute(target, *item)
    elif isinstance(item, list):
        for element in item:
            process(target, element)
    elif isinstance(item, dict):
        for element in item.items():
            process(target, element)
    else:
        logger.error('Cannot process {}', item)


def main(args):
    with open(args.updates) as ud:
        updates = yaml.safe_load(ud)

    logger.info('NetCDF file: {}'.format(args.ncfile))
    with Dataset(args.ncfile, mode='r+') as nc:
        for target_name in updates:
            if target_name == 'global':
                target = nc
                logger.info("Global attributes:")
            else:
                target = nc.variables[target_name]
                logger.info("Attributes of variable '{}':".format(target_name))

            process(target, updates[target_name])


if __name__ == '__main__':
    parser = ArgumentParser(description='Update NetCDF file attributes from a file')
    parser.add_argument('-u', '--updates', required=True, help='File containing updates')
    parser.add_argument('ncfile', help='NetCDF file to update')
    args = parser.parse_args()
    main(args)
