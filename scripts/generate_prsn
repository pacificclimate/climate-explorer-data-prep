#!python
from argparse import ArgumentParser
import logging

from dp.generate_prsn import logger, generate_prsn_file
from nchelpers import CFDataset


def main(args):
    if args.dry_run:
        logger.info('Metadata Check')
        for filepath in [args.prec, args.tasmin, args.tasmax]:
            logger.info('')
            logger.info('File: {}'.format(filepath))
            try:
                dataset = CFDataset(filepath)
            except Exception as e:
                logger.info('{}: {}'.format(e.__class__.__name__, e))
            else:
                for attr in 'project model institute experiment ensemble_member'.split():
                    try:
                        logger.info('{}: {}'.format(attr, getattr(dataset.metadata, attr)))
                    except Exception as e:
                        logger.info('{}: {}: {}'.format(attr, e.__class__.__name__, e))
                logger.info('dependent_varnames: {}'.format(dataset.dependent_varnames()))
    else:
        generate_prsn_file(args.prec, args.tasmin, args.tasmax, args.outdir)


if __name__ == '__main__':
    parser = ArgumentParser(description='Create precipitation as snow data from pr, tasmin, tasmax')
    parser.add_argument('-d', '--dry-run', dest='dry_run', action='store_true')
    parser.add_argument('-p', '--prec', required=True, help='Precipitation file to process')
    parser.add_argument('-n', '--tasmin', required=True, help='Tasmin file to process')
    parser.add_argument('-x', '--tasmax', required=True, help='Tasmax file to process')
    parser.add_argument('-o', '--outdir', required=True, help='Output directory')
    parser.add_argument('-l', '--loglevel', help='Logging level',
                        choices=['INFO', 'DEBUG', 'WARNING', 'ERROR'], default='INFO')
    args = parser.parse_args()
    logger.setLevel(getattr(logging, args.loglevel))
    main(args)
